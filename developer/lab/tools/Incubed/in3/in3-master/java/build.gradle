/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/tutorial_java_projects.html
 */

/*
    Need to change this because its generating garbage in the build directory... consider on using a custom nonjava pipeline
    it is also kind of schizophrenic to have a standalone build system for running tests
*/
plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.ksoichiro.console.reporter' version '0.6.2'
}

def jarSourceFolder = "../build/lib/in3.jar"
def jarOutputFolder = "./target"

// Custom tasks for testing the .jar
task createLibDir {
    mkdir jarOutputFolder
}

task copyJarToBindings(type: Copy) {
    from jarSourceFolder
    into jarOutputFolder
}

sourceSets {
    main {
        java {
            srcDirs = [jarOutputFolder]
        }
        resources {
            srcDirs = [jarOutputFolder]
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['resources']
        }
    }
}

test {
//    systemProperty "java.library.path", "../build/lib"
    useJUnitPlatform()
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    compile fileTree(include: ['*.jar'], dir: jarOutputFolder)
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0-RC1'
    testImplementation 'org.json:json:20190722'
	testImplementation 'commons-io:commons-io:2.6'
}

jacocoTestReport {
    sourceSets {
        main {
            java {
                srcDirs = ['./src']
            }
            resources {
                srcDirs = ['./src']
            }
        }
    }
}

/*
  * Custom sourceSets definition for running the tasks. Since building the .jar has a point of failure (aka the CMakeLists.txt) its desirable to test the .jar
  * For the actual coverage report to work, jacoco plugin must know the source code hence the specific sourceMaps.
*/
consoleReporter {
    jacoco {
        onlyWhenCoverageTaskExecuted true
        reportAfterBuildFinished false
    }
}

/*
  * Testing tasks pipeline. Since the key task is testing, this sequence was built arround it.
  * Also note that the coverage report plugin has a bug on it so we had to disable the attachment of the report after the build
  * and do it manually here (see: https://github.com/ksoichiro/gradle-console-reporter/issues/7).
*/
test.dependsOn 'createLibDir'
test.dependsOn 'copyJarToBindings'
test.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy reportCoverage

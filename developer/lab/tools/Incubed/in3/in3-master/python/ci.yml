.only_python:
  rules:
    - changes:
        - python/**/*
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+-(alpha|beta|rc)\.[0-9]+$/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'

.only_deploy:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/'
      when: manual

.cache_setup:
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip
      - venv/

.cache_setup_with_only_python:
  extends: .only_python
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip
      - venv/

.cache_scipt_before: &cache_scipt_before
  - pip3 install virtualenv || echo "could not install virtualenv, hope it is already installed"
  - virtualenv venv
  - source venv/bin/activate

python:
  image: python
  stage: bindings
  needs:
    - mac_os
    - win_jni
    - gcc8
    - arm_jni
    - gcc8-x86
  extends: .cache_setup
  tags:
    - short-jobs
  script:
    - mkdir -p python/in3/libin3/shared
    - cp mac_build/lib/libin3.dylib python/in3/libin3/shared/libin3.x64.dylib
    - cp win_jni/lib/libin3.so python/in3/libin3/shared/libin3.x64.dll
    - cp x64_build/lib/libin3.so python/in3/libin3/shared/libin3.x64.so
    - cp x86_build/lib/libin3.so python/in3/libin3/shared/libin3.x86.so
    - cp arm_jni_build/lib/libin3.so python/in3/libin3/shared/libin3.arm7.so
    - cd python
    - pip3 install -r requirements.txt
    - ./generate_docs.sh
    - rm -rf docs/_build docs/build_examples.md_
    - cd ..
    - mv python python_multilib
  artifacts:
    paths:
      - python_multilib

python_arm:
  allow_failure: true
  image: python
  extends: .cache_setup_with_only_python
  needs:
    - python
  stage: python
  before_script:
    - *cache_scipt_before
  script:
    - cd python_multilib
    - pip3 install --upgrade pip
    - pip3 install -r requirements.txt
    - coverage run -m pytest --pylama --junitxml=report.xml
    - coverage report
    - coverage-badge -fo docs/coverage.svg
  artifacts:
    reports:
      junit: python_multilib/report.xml
  tags:
    - arm
  variables:
    CRYPTOGRAPHY_DONT_BUILD_RUST : 1

python_win:
  extends: .only_python
  allow_failure: true
  needs:
    - python
  stage: python
  script:
    - cd python_multilib
    - pip3 install --upgrade pip
    - pip3 install -r requirements.txt
    - coverage run -m pytest --pylama --junitxml=report.xml
    - coverage report
    - coverage-badge -fo docs/coverage.svg
  artifacts:
    reports:
      junit: python_multilib/report.xml
  tags:
    - windows

python_macos:
  extends: .cache_setup_with_only_python
  allow_failure: true
  needs:
    - python
  stage: python
  before_script:
    - *cache_scipt_before
  script:
    - cd python_multilib
    - pip3 install --upgrade pip
    - pip3 install -r requirements.txt
    - coverage run -m pytest --pylama --junitxml=report.xml || echo "Failed See Test-Report!"
    - coverage report
    - coverage-badge -fo docs/coverage.svg
  artifacts:
    reports:
      junit: python_multilib/report.xml
  tags:
    - mac-os

python_linux:
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip
      - venv/
  #  extends: .cache_setup_with_only_python
  coverage: '/TOTAL\s+\d+\s+\d+\s+([0-9.]+%)/'
  needs:
    - python
  image: python
  stage: python
  before_script:
    - *cache_scipt_before
  script:
    - cd python_multilib
    - pip3 install --upgrade pip
    - pip3 install -r requirements.txt
    - coverage run -m pytest --pylama --junitxml=report.xml
    - coverage report
    - coverage html
    - coverage-badge -fo docs/coverage.svg
  artifacts:
    paths:
      - python_multilib/htmlcov
    reports:
      junit: python_multilib/report.xml
  tags:
    - short-jobs

release_pip:
  stage: deploy
  image: docker.slock.it/build-images/python-dev-image:latest
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - mac_os
    - python
  script:
    - mkdir -p python/in3/libin3/shared
    - cp python_multilib/in3/libin3/shared/* python/in3/libin3/shared/
    - export version=${CI_COMMIT_TAG}
    - export download_url=https://github.com/blockchainsllc/in3/releases/download/${CI_COMMIT_TAG}/in3_${CI_COMMIT_TAG}_mac.tar.gz
    - sed -i "s/version = environ.*/version = \"$version\"/" python/setup.py
    - cd python
    - cp $pypirc ~/.pypirc
    - ./publish.sh
